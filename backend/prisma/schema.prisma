generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-1.1.x", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ContactRole {
  PATWARI
  SARPANCH
  NUMBERDAR
  OTHER
}

model Village {
  id          String   @id @default(uuid())
  name        String   @unique
  district    String?
  description String?
  createdAt   DateTime @default(now())

  mostEffected Boolean @default(false)
  needsHelp    Boolean @default(false)

  contacts Contact[]

  // relations from requests
  requests    NGORequest[]
  ngoVillages NgoVillage[]
}

model Contact {
  id        String      @id @default(uuid())
  name      String
  phone     String?
  role      ContactRole
  village   Village     @relation(fields: [villageId], references: [id])
  villageId String
  createdAt DateTime    @default(now())
}

model SupportType {
  id         String       @id @default(uuid())
  key        String       @unique
  label      String
  createdAt  DateTime     @default(now())
  requests   NGORequest[]
  NgoVillage NgoVillage[]
}

model Scale {
  id         String       @id @default(uuid())
  key        String       @unique
  label      String
  createdAt  DateTime     @default(now())
  requests   NGORequest[]
  NgoVillage NgoVillage[]
}

model NGO {
  id        String   @id @default(uuid())
  name      String   @unique // ðŸ‘ˆ add unique here
  type      String?
  createdAt DateTime @default(now())

  requests    NGORequest[]
  ngoVillages NgoVillage[]
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model NGORequest {
  id            String        @id @default(uuid())
  ngo           NGO?          @relation(fields: [ngoId], references: [id])
  ngoId         String?
  ngoName       String? // in case NGO created inline or external party
  ngoType       String?
  contactPerson String
  designation   String?
  contactPhone  String
  supportType   SupportType   @relation(fields: [supportTypeId], references: [id])
  supportTypeId String
  scale         Scale         @relation(fields: [scaleId], references: [id])
  scaleId       String
  village       Village       @relation(fields: [villageId], references: [id])
  villageId     String
  remarks       String?
  status        RequestStatus @default(PENDING)
  createdAt     DateTime      @default(now())

  ngoVillage NgoVillage?
}

model AdminUser {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String // hashed password
  createdAt DateTime @default(now())
}

model NgoVillage {
  id        String   @id @default(uuid())
  ngo       NGO      @relation(fields: [ngoId], references: [id])
  ngoId     String
  village   Village  @relation(fields: [villageId], references: [id])
  villageId String
  createdAt DateTime @default(now())

  // contact and request data copied from NGORequest at approval time
  contactPerson String?
  designation   String?
  contactPhone  String?
  supportType   SupportType? @relation(fields: [supportTypeId], references: [id])
  supportTypeId String?
  scale         Scale?       @relation(fields: [scaleId], references: [id])
  scaleId       String?
  remarks       String?
  service       String?

  /// optional: link back to the request that caused this assignment
  request   NGORequest? @relation(fields: [requestId], references: [id])
  requestId String?     @unique

  @@index([villageId])
  @@index([ngoId])
}

model HouseDamageRequirement {
  id              String   @id @default(uuid())
  claimID         String   @unique
  claimantName    String
  fatherName      String?
  gender          String?
  age             Int?
  mobileNumber    String?
  district        String?
  tehsil          String?
  village         String?
  fullAddress     String?

  surveyType      String?   // e.g. "Housedamage" (kept for reference)
  createdAt       DateTime  @default(now())
}

model SchoolStationeryRequirement {
  id               String   @id @default(uuid())
  srNo             Int?     // original Sr No in the sheet (optional)
  blockName        String
  schoolName       String
  studentStrength  Int?     // Total Strength of Student
  requirementCount Int?     // Requirement of Stationery / Uniform (as provided)
  notes            String?  // optional extra info
  createdAt        DateTime @default(now())

  @@index([blockName])
}

model Event {
  id          String       @id @default(cuid())
  title       String
  description String?      @db.Text
  date        DateTime?
  location    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  images      EventImage[]
}

model EventImage {
  id        String   @id @default(cuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  src       String   // path or URL for full-size image
  thumb     String?  // optional thumbnail path/URL
  caption   String?
  order     Int      @default(0)
  createdAt DateTime @default(now())
}
